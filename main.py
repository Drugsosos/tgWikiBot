import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

import wikipediaapi
import wikipedia

from dotenv import dotenv_values
from attr import attrs, attrib

config = dotenv_values('.env')

wiki = wikipediaapi.Wikipedia('ru')

API_TOKEN = config.get('TOKEN')

knownUsers = []  # todo: save these in a file,
userStep = {}  # so they won't reset every time the bot restarts

commands = {  # command description used in the "help" command
    'start': '–ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º',
    'help': '–í—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
    'search': '–ü–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏',
    'random': '–†–∞–Ω–¥–æ–º–Ω–∞—è —Å—Ç–∞—Ç—å—è –∏–∑ –≤–∏–∫–∏–ø–µ–¥–∏–∏'
}


# error handling if user isn't known yet
# (obsolete once known users are saved to file, because all users
#   had to use the /start command and are therefore known to the bot)
def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        knownUsers.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


# only used for console output now
def listener(messages):
    """
    When new messages arrive TeleBot will call this function.
    """
    for m in messages:
        if m.content_type == 'text':
            # print the sent message to the console
            print(str(m.chat.first_name) + " [" + str(m.chat.id) + "]: " + m.text)


bot = telebot.TeleBot(API_TOKEN)
bot.set_update_listener(listener)  # register listener


def set_my_commands():
    bot.delete_my_commands(scope=None, language_code=None)
    commands_list = list()
    for key in commands:
        commands_list.append(telebot.types.BotCommand(key, commands[key]))
    bot.set_my_commands(commands_list)


def keyboard(key_type: str = 'default'):
    markup = ReplyKeyboardMarkup(row_width=3)
    if key_type == 'default':
        markup.add(
            KeyboardButton('üîç–ü–æ–∏—Å–∫'),
            KeyboardButton('üé≤–†–∞–Ω–¥–æ–º'),
            KeyboardButton('üõü–ü–æ–º–æ—â—å'),
        )
    if key_type == 'back':
        markup.add(
            KeyboardButton('‚úÖ–ù–∞ –≥–ª–∞–≤–Ω—É—é'),
        )
    if key_type == 'search':
        markup.add(
            KeyboardButton('–ö–∞—Ä—Ç–∏–Ω–∫–∏'),
            KeyboardButton('–°—Å—ã–ª–∫–∏'),
            KeyboardButton('üîô–ù–∞–∑–∞–¥'),
            KeyboardButton('‚úÖ–ù–∞ –≥–ª–∞–≤–Ω—É—é'),
        )
    # if key_type == "random":
    #     markup.add(
    #         KeyboardButton("–†–∞–Ω–¥–æ–º"),
    #         KeyboardButton("üîô–ù–∞–∑–∞–¥"),
    #     )
    return markup


# handle the "/start" command
@bot.message_handler(commands=['start'])
def command_start(m):
    cid = m.chat.id
    set_my_commands()
    if cid not in knownUsers:
        knownUsers.append(cid)
        userStep[cid] = 0
        bot.send_message(
            cid,
            "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏",
            reply_markup=keyboard()
        )
    else:
        bot.send_message(
            cid,
            "–ù–µ –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø–∏—Å–∞—Ç—å /start üê∏"
        )


@bot.message_handler(commands=['help'])
def command_help(m):
    cid = m.chat.id
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n"
    for key in commands:
        help_text += "/" + key + ": "
        help_text += commands[key] + "\n"
    bot.send_message(
        cid,
        help_text
    )


@attrs
class WikiSearch:
    wiki_results_title = attrib(default=None)
    wiki_results_summary = attrib(default=None)

    def wiki_search(self, query):
        self.wiki_results_title = wiki.page(query).title
        self.wiki_results_summary = wiki.page(query).summary


WikiSearchInstance = WikiSearch()


@bot.message_handler(commands=['search'])
def search(m):
    cid = m.chat.id
    bot.send_message(
        cid,
        "–û—Ç–ø—Ä–∞–≤—å –≤ –æ—Ç–≤–µ—Ç —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è –Ω–∞—à–µ–ª —Å—Ç–∞—Ç—å—é",
        reply_markup=keyboard('back')
    )
    userStep[cid] = 'search_screen'


@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 'search_screen')
def search_screen(m):
    cid = m.chat.id
    text = m.text

    bot.send_chat_action(cid, 'typing')

    if text == '‚úÖ–ù–∞ –≥–ª–∞–≤–Ω—É—é':
        bot.send_message(
            cid,
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π!",
            reply_markup=keyboard(),
        )
        userStep[cid] = 0
    else:
        WikiSearchInstance.wiki_search(text)
        bot.send_message(
            cid,
            WikiSearchInstance.wiki_results_summary,
            reply_markup=keyboard('search'),
        )
        userStep[cid] = 'search_screen_results'


@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 'search_screen_results')
def search_screen_results(m):
    cid = m.chat.id
    text = m.text

    bot.send_chat_action(cid, 'typing')

    match text:
        case 'üîô–ù–∞–∑–∞–¥':
            bot.send_message(
                cid,
                "–û—Ç–ø—Ä–∞–≤—å –≤ –æ—Ç–≤–µ—Ç —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è –Ω–∞—à–µ–ª —Å—Ç–∞—Ç—å—é",
                reply_markup=keyboard('back')
            )
            userStep[cid] = 'search_screen'
        case '‚úÖ–ù–∞ –≥–ª–∞–≤–Ω—É—é':
            bot.send_message(
                cid,
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π!",
                reply_markup=keyboard(),
            )
            userStep[cid] = 0
        case '–ö–∞—Ä—Ç–∏–Ω–∫–∏':
            try:
                found_images = wikipedia.page(WikiSearchInstance.wiki_results_title).images
            except Exception:
                found_images = None
            if found_images:
                bot.send_message(
                    cid,
                    "–í–æ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏:",
                )
                bot.send_message(
                    cid,
                    found_images,
                )
            else:
                bot.send_message(
                    cid,
                    "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ üí©",
                )
            userStep[cid] = 'search_screen_results'
        case '–°—Å—ã–ª–∫–∏':
            try:
                found_links = wikipedia.page(WikiSearchInstance.wiki_results_title).links
            except Exception:
                found_links = None
            if found_links:
                bot.send_message(
                    cid,
                    "–í–æ—Ç —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏:",
                )
                bot.send_message(
                    cid,
                    found_links,
                )
            else:
                bot.send_message(
                    cid,
                    "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏ üí©",
                )
            userStep[cid] = 'search_screen_results'
        case _:
            bot.send_message(
                cid,
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π!"
            )


# @bot.message_handler(commands=['random'])
# def random(m):
#     cid = m.chat.id
#     bot.send_message(
#         cid,
#         "Please choose your image now",
#         reply_markup=keyboard('random')
#     )
#     userStep[cid] = 'random'

# @bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 'random')
# def random_screen(m):
#     cid = m.chat.id
#     text = m.text
#
#     bot.send_chat_action(cid, 'typing')
#
#     if text == 'üîô–ù–∞–∑–∞–¥':
#         userStep[cid] = 0
#     else:
#         bot.send_message(cid, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π!")


@bot.message_handler(func=lambda message: True, content_types=['text'])
def command_default(m):
    cid = m.chat.id
    text = m.text
    match text:
        case 'üîç–ü–æ–∏—Å–∫':
            search(m)
        # case 'üé≤–†–∞–Ω–¥–æ–º':
        #     random(m)
        case 'üõü–ü–æ–º–æ—â—å':
            command_help(m)
        case _:
            bot.send_message(
                cid,
                f'–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É "{text}"\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ /help'
            )


if __name__ == '__main__':
    bot.infinity_polling()
